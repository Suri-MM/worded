{"version":3,"sources":["components/Logo/Logo.js","components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","components/About/About.js","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Logo","className","Card","props","toggleOnClick","bind","toggleMouseOver","toggleMouseLeave","state","isClicked","mouseOver","examples","word","this","req","Request","fetch","then","response","json","data","example","map","values","text","forEach","item","includes","push","setState","Object","assign","catch","console","log","definition","synonyms","imgUrl","comments","onClick","onMouseEnter","onMouseLeave","i","partsOfSpeech","typeOfWord","slice","synonym","filter","String","key","keys","length","src","alt","React","Component","CardList","index","img_url","SearchBox","onSiteChange","searchChange","searchField","site","type","placeholder","onChange","About","href","App","onSearchChange","words","filteredWords","toLowerCase","connect","dispatch","event","payload","target","value","Boolean","window","location","hostname","match","initialState","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fb88240d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Logo.css';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className = \"head\">\r\n            <div className = \"headBox\" >\r\n                <h1 className = \"logo\" ><h1 className = \"we\" >W</h1>ord<h1 className = \"we\" >E</h1>d</h1>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './Card.css';\r\n\r\nclass Card extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleOnClick = this.toggleOnClick.bind(this);\r\n        this.toggleMouseOver = this.toggleMouseOver.bind(this);\r\n        this.toggleMouseLeave = this.toggleMouseLeave.bind(this);\r\n        this.state = {\r\n            isClicked: false,\r\n            mouseOver: false,\r\n            examples : {}\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { word } = this.props;\r\n\r\n        var url = 'https://api.wordnik.com/v4/word.json/' +\r\n          word +  \r\n          '/examples?includeDuplicates=false&useCanonical=false&limit=5&api_key=1vbz9zqcow82ujpti410s5zldyyy40calkfnpz1fk8l008mor';\r\n\r\n        var req = new Request(url);\r\n            fetch(req)\r\n            .then(response => response.json())\r\n            .then(data => {  \r\n                let example = data.examples.map((values) => {\r\n                    return values.text;\r\n                }\r\n                )\r\n                const examples = [];\r\n                example.forEach((item) =>{\r\n                    if(!examples.includes(item)){\r\n                        examples.push(item);\r\n                    }\r\n                })\r\n                this.setState(Object.assign(this.state.examples, { examples }));\r\n            }         \r\n            ).catch(console.log);\r\n        \r\n    }\r\n\r\n    toggleOnClick() {\r\n        this.setState({ mouseOver: false });\r\n        this.setState({ isClicked: !this.state.isClicked });\r\n    }\r\n\r\n\r\n    toggleMouseOver(){\r\n        if(this.state.isClicked === false){\r\n            this.setState({ mouseOver: true });    \r\n        }\r\n    }\r\n\r\n    toggleMouseLeave(){\r\n        this.setState({ mouseOver: false});\r\n    }\r\n\r\n    render() {\r\n            const { word, definition, synonyms, imgUrl, comments } = this.props;  \r\n        \r\n            return (\r\n            <div className = \"card\" onClick = { this.toggleOnClick } onMouseEnter = { this.toggleMouseOver } onMouseLeave = { this.toggleMouseLeave }>\r\n            <h3 className = \"word\" >{ word }</h3>\r\n                {\r\n                    definition.map((data, i) => {\r\n                    const typeOfWord = data[0];\r\n                    const definition = data.slice(3);\r\n                    let partsOfSpeech;\r\n\r\n                    //Get the parts of speech\r\n                    switch(typeOfWord) {\r\n                        case 'v':\r\n                            partsOfSpeech = 'verb';\r\n                            break;\r\n                        case 'j':\r\n                            partsOfSpeech = 'adj';\r\n                            break;\r\n                        case 'n':\r\n                            partsOfSpeech = 'noun';\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n\r\n                    //Get the correct synonyms for the words\r\n                    let synonym = synonyms.filter((data) => {\r\n                        return data.includes(String(i + 1));\r\n                    })\r\n\r\n                    synonym = synonym.map(data => data.slice(3));\r\n                    \r\n                    return (\r\n                        <div key = { i } className = \"content\" >\r\n                            <div className = \"defBox\" >\r\n                            {\r\n                                (partsOfSpeech === 'verb') ? <h6 className=\"partsOfSpeechVerb\">{ partsOfSpeech }</h6> : \r\n                                (partsOfSpeech === 'noun') ? <h6 className=\"partsOfSpeechNoun\">{ partsOfSpeech }</h6> :\r\n                                <h6 className=\"partsOfSpeechAdj\" >{ partsOfSpeech }</h6> \r\n                            }\r\n                            <p className = \"definition\" >{ definition }</p>\r\n                            </div>\r\n                            {\r\n                                Object.keys(synonym).length !== 0 ? \r\n                                <p className = \"synonymHead\">Synonyms</p> :\r\n                                <p></p>\r\n                            }\r\n                            <div className = \"synonymCover\">\r\n                            {\r\n                            synonym.map((synonym, i) => {\r\n                                return <p key = { i } className = \"synonyms\" >{ synonym }</p>\r\n                            })\r\n                            }\r\n                            </div>\r\n                            \r\n                        </div>\r\n                    );\r\n                    \r\n                })   \r\n                }\r\n                {\r\n                    this.state.mouseOver ? (\r\n                        <div>\r\n                            <p className = \"comments\">{ comments }</p>\r\n                        </div>\r\n                    )\r\n                    :\r\n                    <div>\r\n                    </div>\r\n                }\r\n                {\r\n                    this.state.isClicked ?  (\r\n                    <div>\r\n                        <p className = \"comments\">{ comments }</p>\r\n                        <img src = { String(imgUrl) } alt = 'Word representation' className = \"image\" />\r\n                        <p className = \"exampleHead\" >Examples</p>\r\n                        <div className = \"examples\">\r\n                        {\r\n                            this.state.examples.map((example, i) => {\r\n                                return (<div>\r\n                                            <p key = { i } className = \"example\" >{ example }</p>\r\n                                        </div>);\r\n                            })\r\n                        }\r\n                        </div>\r\n                    </div>\r\n                    )\r\n                    :\r\n                    <div>\r\n                    </div>\r\n                }\r\n        </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card.js';\r\nimport './CardList.css';\r\n\r\nconst CardList = (props) => {\r\n    const { data } = props;\r\n    return (\r\n        <div className=\"cardlist\">\r\n            {\r\n                Object.keys(data).map((index, i) => {\r\n                    return (\r\n                            <Card className=\"card\"                   \r\n                                key = { i }\r\n                                word = { data[index].word }\r\n                                definition = { data[index].definition.map(data => {\r\n                                    return data;\r\n                                })}\r\n                                synonyms = { data[index].synonyms.map(data => {\r\n                                    return data;\r\n                                })}\r\n                                imgUrl = { data[index].img_url }\r\n                                comments = { data[index].comments }\r\n                            />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({onSiteChange, searchField, searchChange, site}) => {\r\n    return (\r\n        site === 'home' ?\r\n        <div className = \"sBox\">\r\n            <p className = \"home\" onClick = { () => onSiteChange('home') }>Home</p>\r\n            <input \r\n                className = \"box\"\r\n                type = 'search' \r\n                placeholder = 'Search Words'\r\n                onChange = { searchChange }\r\n                > \r\n            </input>\r\n            <p className = \"about\" onClick = { () => onSiteChange('about') }>About</p>\r\n        </div>\r\n        :\r\n        <div className = \"sBoxA\">\r\n            <p className = \"homeA\" onClick = { () => onSiteChange('home') }>Home</p>\r\n            <input \r\n                className = \"boxA\"\r\n                type = 'search' \r\n                placeholder = 'Search Words'\r\n                onChange = { searchChange }\r\n                > \r\n            </input>\r\n            <p className = \"aboutA\" onClick = { () => onSiteChange('about') }>About</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './About.css';\r\n\r\nconst About = ({ onSiteChange }) => {\r\n    return (\r\n        <div className = \"aboutBack\">\r\n            <div className = \"aboutCard\">\r\n                <p className = \"desc\">\r\n                <h2 className = \"titleW\"><h2><h2 className = \"we1\" >W</h2>ord<h2 className = \"we1\" >E</h2>d</h2></h2> helps you to learn new English words.<br></br> It provides definitions, synonyms, and explanations of words, along with example sentences and images representing the word.<br></br> The definitions are gathered from resources including Vocabulary.com, Dictionary.com and Wordnik.com.<br></br> The example sentences are obtained from the Wordnik API.  \r\n                </p>\r\n                <p></p>\r\n                <button onClick = { () => onSiteChange('home')} >Learn Words</button>\r\n                <p></p>\r\n            </div>\r\n            <div className = \"aboutEnd\">\r\n                <div className = \"rowEnd\">\r\n                    <div></div>\r\n                    <div className = \"aboutEndBox\">\r\n                        <p className = \"credits\" >This is a React-based app, that uses Node.js at the backend and uses Postgres database. The link to github repository with the source code of the app is given below.</p>\r\n                        <div className = \"fill\" ></div>\r\n                        <a href = \"https://github.com/Suri-MM/worded\" ><img src = \"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\" className = \"gitico\" alt = \"GitHub\"></img></a>\r\n                    </div>\r\n                    <div></div>\r\n                </div>\r\n                <div className = \"greet\" >\r\n                    <p className = \"greetText\" >Glad you are taking a look at this website.</p>\r\n                    <p>Have a good day.</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React from 'react';\nimport './App.css';\nimport Logo from './components/Logo/Logo.js';\nimport CardList from './components/CardList/CardList.js';\nimport SearchBox from './components/SearchBox/SearchBox.js';\nimport About from './components/About/About.js';\nimport { setSearchField } from './actions';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchField\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value))\n  }\n}\n\nclass App extends React.Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      data: '',\n      site: 'home'\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://fathomless-eyrie-79486.herokuapp.com/')\n    .then(response => response.json())\n    .then(data => {\n      this.setState({ data });\n    });\n  }\n\n  onSiteChange = (site) => {\n    if(site === 'about'){\n      this.setState({ site: 'about'});\n    }\n    else if(site === 'home'){\n      this.setState({ site: 'home'});\n    }\n  }\n\n  render() {\n    const { searchField, onSearchChange } = this.props;\n    const words = this.state.data;\n\n    const filteredWords = Object.values(words).filter((index) =>{\n      return index.word.toLowerCase().includes(searchField.toLowerCase()) \n    });\n\n    return (\n        <div className=\"App\">\n          <Logo className = \"head\"/>\n          {\n            this.state.site === 'home' ?\n            <div>\n              <SearchBox onSiteChange = { this.onSiteChange } searchChange = { onSearchChange } site = { this.state.site }/>\n              <CardList className = \"cardlist\" data = { filteredWords }/>\n            </div>\n            :\n            <div>\n               <SearchBox onSiteChange = { this.onSiteChange } searchChange = { onSearchChange } site = { this.state.site }/>\n              <About onSiteChange = { this.onSiteChange }/>\n            </div>\n          }\n        </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD } from './constants';\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from './constants';\r\n\r\nconst initialState = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchWords = (state = initialState, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { searchWords } from './reducers';\n\nconst store = createStore(searchWords);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider  store = { store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}